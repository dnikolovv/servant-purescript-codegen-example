-- File auto generated by servant-purescript! --
module ServerAPI where

import Prelude

import Affjax.RequestHeader (RequestHeader(..))
import Data.Argonaut (Json, JsonDecodeError)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Array (catMaybes)
import Data.Either (Either(..))
import Data.Foldable (fold)
import Data.HTTP.Method (Method(..))
import Data.Maybe (Maybe(..))
import Data.Tuple (Tuple)
import GenTypesDemo.API.Types (CreateUserRequest, UpdateUserRequest, User, UserId)
import Servant.PureScript (AjaxError, class MonadAjax, flagQueryPairs, paramListQueryPairs, paramQueryPairs, request, toHeader, toPathSegment)
import URI (RelativePart(..), RelativeRef(..))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E

data Api = Api

getUsers ::
  forall m.
  MonadAjax Api m =>
  m (Either (AjaxError JsonDecodeError Json) (Array User))
getUsers =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "users"
    ]
  query = Nothing

getUserByUserId ::
  forall m.
  MonadAjax Api m =>
  UserId ->
  m (Either (AjaxError JsonDecodeError Json) User)
getUserByUserId userId =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "user"
    , toPathSegment userId
    ]
  query = Nothing

postUser ::
  forall m.
  MonadAjax Api m =>
  CreateUserRequest ->
  m (Either (AjaxError JsonDecodeError Json) User)
postUser reqBody =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "user"
    ]
  query = Nothing

putUserByUserId ::
  forall m.
  MonadAjax Api m =>
  UpdateUserRequest ->
  UserId ->
  m (Either (AjaxError JsonDecodeError Json) Unit)
putUserByUserId reqBody userId =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left PUT
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = D.unit
  relativePart = RelativePartNoAuth $ Just
    [ "user"
    , toPathSegment userId
    ]
  query = Nothing

deleteUserByUserId ::
  forall m.
  MonadAjax Api m =>
  UserId ->
  m (Either (AjaxError JsonDecodeError Json) Unit)
deleteUserByUserId userId =
  request Api req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left DELETE
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.unit
  relativePart = RelativePartNoAuth $ Just
    [ "user"
    , toPathSegment userId
    ]
  query = Nothing
